!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(f[n]=t[n]);0==--m&&0===y&&N()}(e,n),t&&t(e,n)};var n,r=!0,i="73cf3cd5b4f9c613cfa4",o=1e4,s={},a=[],c=[];function l(e){var t=R[e];if(!t)return T;var r=function(r){return t.hot.active?(R[r]?-1===R[r].parents.indexOf(e)&&R[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),T(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return T[e]},set:function(t){T[e]=t}}};for(var o in T)Object.prototype.hasOwnProperty.call(T,o)&&"e"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===u&&d("prepare"),y++,T.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===u&&(g[e]||E(e),0===y&&0===m&&N())}},r}var p=[],u="idle";function d(e){u=e;for(var t=0;t<p.length;t++)p[t].call(null,e)}var h,f,v,m=0,y=0,g={},w={},b={};function x(e){return+e+""===e?+e:e}function _(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=T.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;w={},g={},b=e.c,v=e.h,d("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});f={};return E(0),"prepare"===u&&0===y&&0===m&&N(),t});var t}function E(e){b[e]?(w[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=T.p+""+e+"."+i+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function N(){d("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return C(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in f)Object.prototype.hasOwnProperty.call(f,n)&&t.push(x(n));e.resolve(t)}}function C(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,r,o,c,l;function p(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),o=i.id,s=i.chain;if((c=R[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var a=0;a<c.parents.length;a++){var l=c.parents[a],p=R[l];if(p){if(p.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([l]),moduleId:o,parentId:l};-1===t.indexOf(l)&&(p.hot._acceptedDependencies[o]?(n[l]||(n[l]=[]),h(n[l],[o])):(delete n[l],t.push(l),r.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var m={},y=[],g={},w=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var _ in f)if(Object.prototype.hasOwnProperty.call(f,_)){var E;l=x(_);var N=!1,C=!1,A=!1,S="";switch((E=f[_]?p(l):{type:"disposed",moduleId:_}).chain&&(S="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(N=new Error("Aborted because of self decline: "+E.moduleId+S));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(N=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+S));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(N=new Error("Aborted because "+l+" is not accepted"+S));break;case"accepted":t.onAccepted&&t.onAccepted(E),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),A=!0;break;default:throw new Error("Unexception type "+E.type)}if(N)return d("abort"),Promise.reject(N);if(C)for(l in g[l]=f[l],h(y,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,l)&&(m[l]||(m[l]=[]),h(m[l],E.outdatedDependencies[l]));A&&(h(y,[E.moduleId]),g[l]=w)}var O,k=[];for(r=0;r<y.length;r++)l=y[r],R[l]&&R[l].hot._selfAccepted&&k.push({module:l,errorHandler:R[l].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var j,I,P=y.slice();P.length>0;)if(l=P.pop(),c=R[l]){var M={},L=c.hot._disposeHandlers;for(o=0;o<L.length;o++)(n=L[o])(M);for(s[l]=M,c.hot.active=!1,delete R[l],delete m[l],o=0;o<c.children.length;o++){var D=R[c.children[o]];D&&((O=D.parents.indexOf(l))>=0&&D.parents.splice(O,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=R[l]))for(I=m[l],o=0;o<I.length;o++)j=I[o],(O=c.children.indexOf(j))>=0&&c.children.splice(O,1);for(l in d("apply"),i=v,g)Object.prototype.hasOwnProperty.call(g,l)&&(e[l]=g[l]);var U=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=R[l])){I=m[l];var B=[];for(r=0;r<I.length;r++)if(j=I[r],n=c.hot._acceptedDependencies[j]){if(-1!==B.indexOf(n))continue;B.push(n)}for(r=0;r<B.length;r++){n=B[r];try{n(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:I[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<k.length;r++){var H=k[r];l=H.module,a=[l];try{T(l)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||U||(U=e)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(e){e(y)}))}var R={};function T(t){if(R[t])return R[t].exports;var r=R[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:C,status:function(e){if(!e)return u;p.push(e)},addStatusHandler:function(e){p.push(e)},removeStatusHandler:function(e){var t=p.indexOf(e);t>=0&&p.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}T.m=e,T.c=R,T.d=function(e,t,n){T.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},T.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},T.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return T.d(t,"a",t),t},T.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},T.p="",T.h=function(){return i},l("./src/index.js")(T.s="./src/index.js")}({"./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san":function(e,t,n){(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!0)).push([e.i,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbody {\n    background: lightblue;\n}\nth,\ntd {\n    border: 1px solid black;\n}\n","",{version:3,sources:["/Users/xujiazhen/Documents/Projects/BDFE/San_Example/src/components/table.san?5e0fb804"],names:[],mappings:";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;IACA,sBAAA;CACA;AACA;;IAEA,wBAAA;CACA",file:"table.san",sourcesContent:["<template>\n    <div class=\"app\">\n        <button type=\"button\" name=\"button\" on-click=\"addItem\">添加</button>\n        <table>\n                <tr>\n                    <th>姓名</th>\n                    <th>审核状态</th>\n                    <th>操作</th>\n                </tr>\n                <tr  s-for=\"i, index in items\">\n                    <td>{{i.name}}</td>\n                    <td>{{i.state}}</td>\n                    <td><button on-click=\"rmItem(index)\">{{i.button}}</button></td>\n                </tr>\n        </table>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    initData() {\n        return {\n            items: [\n                {name: '张三', state: '合格', button: '删除'},\n                {name: '李四', state: '不合格', button: '删除'},\n                {name: '王五', state: '待审核', button: '审核'},\n                {name: '赵六', state: '待审核', button: '审核'},\n                {name: '孙七', state: '待审核', button: '审核'}\n            ]\n        }\n    },\n    addItem: function () {\n        let item = this.data.get('items')[0];\n        this.data.push('items', item);\n    },\n    rmItem(index) {\n        let item = this.data.get('items')[index];\n        if (item.button === '删除') {\n            this.data.removeAt('items', index);\n        }\n        if (item.button === '审核') {\n            this.data.set('items.' + index + '.state', '合格');\n        }\n    }\n}\n\n<\/script>\n\n<style>\n    body {\n        background: lightblue;\n    }\n    th,\n    td {\n        border: 1px solid black;\n    }\n</style>\n"],sourceRoot:""}])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var s=e[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},"./node_modules/html-loader/index.js?minimize=false!./node_modules/san-loader/lib/selector.js?type=template&index=0!./src/components/table.san":function(e,t){e.exports='\n<div class="app">\n    <button type="button" name="button" on-click="addItem">添加</button>\n    <table>\n            <tr>\n                <th>姓名</th>\n                <th>审核状态</th>\n                <th>操作</th>\n            </tr>\n            <tr  s-for="i, index in items">\n                <td>{{i.name}}</td>\n                <td>{{i.state}}</td>\n                <td><button on-click="rmItem(index)">{{i.button}}</button></td>\n            </tr>\n    </table>\n</div>\n'},"./node_modules/process/browser.js":function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,l=[],p=!1,u=-1;function d(){p&&c&&(p=!1,c.length?l=c.concat(l):u=-1,l.length&&h())}function h(){if(!p){var e=a(d);p=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,p=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new f(e,t)),1!==l.length||p||a(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},"./node_modules/san-loader/lib/selector.js?type=script&index=0!./src/components/table.san":function(e,t,n){"use strict";n.r(t),t.default={initData:()=>({items:[{name:"张三",state:"合格",button:"删除"},{name:"李四",state:"不合格",button:"删除"},{name:"王五",state:"待审核",button:"审核"},{name:"赵六",state:"待审核",button:"审核"},{name:"孙七",state:"待审核",button:"审核"}]}),addItem:function(){let e=this.data.get("items")[0];this.data.push("items",e)},rmItem(e){let t=this.data.get("items")[e];"删除"===t.button&&this.data.removeAt("items",e),"审核"===t.button&&this.data.set("items."+e+".state","合格")}}},"./node_modules/san-router/dist/san-router.source.js":function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=6)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e),r=(0,o.default)(t),i=n.path;if(0===i.indexOf("/"))return e;var s=i.split("/"),a=r.path.split("/");a.pop();for(var c=0;c<s.length;c++){var l=s[c];switch(l){case"..":a.pop();break;case".":break;default:a.push(l)}}""!==a[0]&&a.unshift("");return a.join("/")+(n.queryString?"?"+n.queryString:"")};var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t={hash:"",queryString:"",params:{},query:{},path:e},n=t.path.indexOf("#");n>=0&&(t.hash=t.path.slice(n+1),t.path=t.path.slice(0,n));var r=t.query,i=t.path.indexOf("?");i>=0&&(t.queryString=t.path.slice(i+1),t.path=t.path.slice(0,i),t.queryString.split("&").forEach(function(e){var t=e.indexOf("="),n="";t>0&&(n=e.slice(t+1),e=e.slice(0,t));var i=decodeURIComponent(e);n=decodeURIComponent(n),r.hasOwnProperty(i)?r[i]=[].concat(r[i],n):r[i]=n}));return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.on=function(e,t){"function"==typeof t&&(this._eventListeners||(this._eventListeners={}),this._eventListeners[e]||(this._eventListeners[e]=[]),this._eventListeners[e].push(t))},e.prototype.un=function(e,t){if(this._eventListeners&&this._eventListeners[e])if(t)for(var n=this._eventListeners[e],r=n.length;r--;)n[r]===t&&n.splice(r,1);else this._eventListeners[e]=[]},e.prototype.fire=function(e,t){if(!e)throw new Error("No event type specified");var n=this._eventListeners&&this._eventListeners[e];if(n)for(var r=0;r<n.length;r++)n[r](t)},e}();t.default=r},function(e,t,n){"use strict";t.__esModule=!0;var r,i=n(6),o=n(0),s=(r=o)&&r.__esModule?r:{default:r};t.default={template:'<a href="{{href}}"\n        onclick="return false;"\n        on-click="clicker($event)"\n        target="{{target}}"\n        class="{{class}}"\n        style="{{style}}"\n        >\n        <slot></slot>\n    </a>',clicker:function(e){var t=this.data.get("href");"string"==typeof t&&i.router.locator.redirect(t.replace(/^#/,"")),e.preventDefault?e.preventDefault():e.returnValue=!1},computed:{href:function(){var e=this.data.get("to");if("string"==typeof e){var t=(0,s.default)(e,i.router.locator.current);return"hash"===i.router.mode&&(t="#"+t),t}}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){var e=location.href.indexOf("#");return e<0?"/":location.href.slice(e+1)||"/"}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.hashChangeHandler=function(){n.redirect(s())},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener&&window.addEventListener("hashchange",this.hashChangeHandler,!1),window.attachEvent&&window.attachEvent("onhashchange",this.hashChangeHandler)},t.prototype.stop=function(){window.removeEventListener&&window.removeEventListener("hashchange",this.hashChangeHandler,!1),window.detachEvent&&window.detachEvent("onhashchange",this.hashChangeHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r?(this.referrer=n,this.current=e,location.hash=e):n=this.referrer,!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.redirect(this.current,{force:!0})},t}(r.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){return location.pathname+location.search}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.popstateHandler=function(){n.referrer=n.current,n.current=s(),n.fire("redirect",{url:n.current,referrer:n.referrer})},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener("popstate",this.popstateHandler)},t.prototype.stop=function(){window.removeEventListener("popstate",this.popstateHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r&&(this.referrer=n,this.current=e,history.pushState({},"",e)),!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.fire("redirect",{url:this.current,referrer:this.referrer})},t}(r.default);t.default=a,a.isSupport="pushState"in window.history},function(e,t,n){"use strict";t.__esModule=!0,t.Link=t.router=t.Router=t.version=void 0;var r=c(n(4)),i=c(n(5)),o=c(n(1)),s=c(n(3)),a=c(n(7));function c(e){return e&&e.__esModule?e:{default:e}}var l=365611;function p(e){return e.prototype&&(5===e.prototype.nodeType||"san-cmpt"===e.prototype._type)}t.version="1.2.0";var u=t.Router=function(){function e(){var t=this,n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mode,r=void 0===n?"hash":n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=[],this.routeAlives=[],this.listeners=[],this.locatorRedirectHandler=function(e){for(var n=(0,o.default)(e.url),r=void 0,i=0;i<t.routes.length;i++){var s=t.routes[i],a=s.rule.exec(n.path);if(a){r=s;for(var c=s.keys||[],l=1;l<a.length;l++){var p=c[l]||l,u=a[l];n.query[p]=u,n.params[p]=u}n.referrer=e.referrer,n.config=s.config;break}}var d=0,h=1,f={hash:n.hash,queryString:n.queryString,query:n.query,path:n.path,referrer:n.referrer,config:n.config,resume:m,suspend:function(){h=0},stop:function(){h=-1}},v=function(){h>0&&(d<t.listeners.length?(t.listeners[d].call(t,f,n.config),h>0&&m()):y())};function m(){h=1,d++,v()}var y=function(){if(r)t.doRoute(r,n);else for(var e=t.routeAlives.length;e--;)t.routeAlives[e].component.dispose(),t.routeAlives.splice(e,1)};v()},this.setMode(r)}return e.prototype.listen=function(e){this.listeners.push(e)},e.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)this.listeners[t]===e&&this.listeners.splice(t,1)},e.prototype.doRoute=function(e,t){for(var n=this,r=!1,i=this.routeAlives.length;i--;){var o=this.routeAlives[i];o.id===e.id?(o.component.data.set("route",t),o.component._callHook("route"),r=!0):(o.component.dispose(),this.routeAlives.splice(i,1))}r||(e.Component?p(e.Component)?this.attachCmpt(e,t):e.Component().then(function(r){p(r)?e.Component=r:r.__esModule&&p(r.default)&&(e.Component=r.default),n.attachCmpt(e,t)}):e.handler.call(this,t))},e.prototype.attachCmpt=function(e,t){var n=new e.Component;n.data.set("route",t),n._callHook("route");var r=e.target,i=(0,a.default)(r);if(!i)throw new Error('[SAN-ROUTER ERROR] Attach failed, target element "'+e.target+'" is not found.');n.attach(i),this.routeAlives.push({component:n,id:e.id})},e.prototype.add=function(e){var t=e.rule,n=e.handler,r=e.target,i=void 0===r?"#main":r,o=e.Component,s=[""];if("string"==typeof t){var a=t.replace(/\/:([a-z0-9_-]+)(?=\/|$)/gi,function(e,t){return s.push(t),"/([^/\\s]+)"});t=new RegExp("^"+a+"$","i")}if(!(t instanceof RegExp))throw new Error("[SAN-ROUTER ERROR] Rule must be string or RegExp!");var c=(++l).toString();return this.routes.push({id:c,rule:t,handler:n,keys:s,target:i,Component:o,config:e}),this},e.prototype.start=function(){return this.isStarted||(this.isStarted=!0,this.locator.on("redirect",this.locatorRedirectHandler),this.locator.start(),this.locator.reload()),this},e.prototype.stop=function(){return this.locator.un("redirect",this.locatorRedirectHandler),this.locator.stop(),this.isStarted=!1,this},e.prototype.setMode=function(e){if(e=e.toLowerCase(),this.mode!==e){this.mode=e;var t=!1;switch(this.isStarted&&(this.stop(),t=!0),e){case"hash":this.locator=new r.default;break;case"html5":this.locator=new i.default}return t&&this.start(),this}},e}();t.router=new u;t.Link=s.default},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){switch(void 0===e?"undefined":r(e)){case"object":return e;case"string":return document.querySelector?document.querySelector(e):document.getElementById(e.replace(/#/i,""))}}}])},e.exports=r()},"./node_modules/san/dist/san.dev.js":function(e,t,n){(function(t){!function(n){var r=1,i=(new Date).getTime().toString(16).slice(8);function o(){return"_"+i+r++}function s(){}function a(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];void 0!==r&&(e[n]=r)}return e}function c(e,t){var n=e.prototype,r=new Function;r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e,a(e.prototype,n)}function l(e,t){if(e&&e.length>0)for(var n=0,r=e.length;n<r&&!1!==t(e[n],n);n++);}function p(e,t){var n=Function.prototype.bind,r=Array.prototype.slice;if(n&&e.bind===n)return n.apply(e,r.call(arguments,1));var i=r.call(arguments,2);return function(){return e.apply(t,i.concat(r.call(arguments)))}}function u(e,t,n,r){e.addEventListener?e.addEventListener(t,n,r):e.attachEvent("on"+t,n)}function d(e){var t={};return l(e.split(","),function(e){t[e]=1}),t}var h=d("svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph");function f(e){return h[e]?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e)}function v(e){e&&e.parentNode&&e.parentNode.removeChild(e)}var m,y=[],g="function"==typeof Promise&&/native code/.test(Promise);function w(e,n){if(n&&(e=p(e,n)),y.push(e),!m)if(m=function(){var e=y.slice(0);y=[],m=null;for(var t=0,n=e.length;t<n;t++)e[t]()},"function"==typeof t)t(m);else if("function"==typeof MessageChannel){var r=new MessageChannel,i=r.port2;r.port1.onmessage=m,i.postMessage(1)}else g?Promise.resolve().then(m):setTimeout(m,0)}var b="undefined"!=typeof navigator&&navigator.userAgent.match(/msie\s*([0-9]+)/i),x=b?b[1]-0:0,_=x&&x<9;function E(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}9===x&&u(document,"selectionchange",function(){var e=document.activeElement;"TEXTAREA"!==e.tagName&&"INPUT"!==e.tagName||E(e,"input")});var N=d("area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr"),C="<<anonymous>>";function R(e){return e&&1===e.nodeType?"element":Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function T(e){var t=function(){};t.isRequired=s;var n=function(t,n,r,i,o){var s=n[r],a=R(s);if(i=i||C,null!=s)e(n,r,i,o);else if(t)throw new Error("[SAN ERROR] The `"+r+"` is marked as required in `"+i+"`, but its value is "+a)};return(t=p(n,null,!1)).isRequired=p(n,null,!0),t}function A(e){return T(function(t,n,r,i){var o=R(t[n]);if(o!==e)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+o+" supplied to "+r+", expected "+e+")")})}var S=(T(s),T(s),T(s),T(s),T(s),T(s),T(s));function O(e){this.source=e,this.len=this.source.length,this.index=0}function k(e){return(e=e||{}).textExpr||(e.directives=e.directives||{},e.props=e.props||[],e.events=e.events||[],e.children=e.children||[]),e}function j(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()})}S={any:T(s),array:A("array"),object:A("object"),func:A("function"),string:A("string"),number:A("number"),bool:A("boolean"),symbol:A("symbol"),arrayOf:function(e){return T(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `arrayOf`, expected `function`");var o=t[n],s=R(o);if("array"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected array)");for(var a=0,c=o.length;a<c;a++)e(o,a,r,i+"["+a+"]")})},instanceOf:function(e){return T(function(t,n,r,i){var o=t[n];if(!(o instanceof e)){var s=o.constructor&&o.constructor.name?o.constructor.name:C,a=e.name||C;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected instance of "+a+")")}})},shape:function(e){return T(function(t,n,r,i){if("object"!==R(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `shape`, expected `object`");var o=t[n],s=R(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected object)");for(var a in e)if(e.hasOwnProperty(a)){var c=e[a];"function"==typeof c&&c(o,a,r,i+"."+a)}})},oneOf:function(e){return T(function(t,n,r,i){if("array"!==R(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++)if(o===e[s])return;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of value(`"+o+"` supplied to "+r+", expected one of "+e.join(",")+")")})},oneOfType:function(e){return T(function(t,n,r,i){if("array"!==R(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++){var c=e[s];if("function"==typeof c)try{return void c(t,n,r,i)}catch(e){}}throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of value(`"+o+"` supplied to "+r+")")})},objectOf:function(e){return T(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `objectOf`, expected function");var o=t[n],s=R(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of type("+s+" supplied to "+r+", expected object)");for(var a in o)o.hasOwnProperty(a)&&e(o,a,r,i+"."+a)})},exact:function(e){return T(function(t,n,r,i,o){if("object"!==R(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `exact`");var s=t[n],c=R(s);if("object"!==c)throw new Error("[SAN ERROR] Invalid data `"+i+"` of type `"+c+"`(supplied to "+r+", expected `object`)");var l={};for(var p in a(l,e),a(l,s),l)if(l.hasOwnProperty(p)){var u=e[p];if(!u)throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+p+"` supplied to `"+r+"`. (`"+p+"` is not defined in `DataTypes.exact`)");if(!(p in s))throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+p+"` supplied to `"+r+"`. (`"+p+"` is marked `required` in `DataTypes.exact`)");u(s,p,r,i+"."+p,o)}})}},O.prototype.currentCode=function(){return this.charCode(this.index)},O.prototype.cut=function(e,t){return this.source.slice(e,t)},O.prototype.go=function(e){this.index+=e},O.prototype.nextCode=function(){return this.go(1),this.currentCode()},O.prototype.charCode=function(e){return this.source.charCodeAt(e)},O.prototype.goUntil=function(e){for(var t;this.index<this.len&&(t=this.currentCode());)switch(t){case 32:case 9:this.index++;break;default:return t===e?(this.index++,1):void 0}},O.prototype.match=function(e){e.lastIndex=this.index;var t=e.exec(this.source);return t&&(this.index=e.lastIndex),t};var I={STRING:1,NUMBER:2,BOOL:3,ACCESSOR:4,INTERP:5,CALL:6,TEXT:7,BINARY:8,UNARY:9,TERTIARY:10};function P(e){return{type:I.ACCESSOR,paths:e}}function M(e){return e.match(/\s*([\$0-9a-z_]+)/gi)[1]}function L(e){var t=function e(t){var n=function e(t){var n=function(e){var t=F(e);e.goUntil();var n=e.currentCode();switch(n){case 61:case 33:if(61===e.nextCode())return n+=61,61===e.nextCode()&&(n+=61,e.go(1)),{type:I.BINARY,operator:n,segs:[t,F(e)]};e.go(-1)}return t}(t);t.goUntil();if(38===t.currentCode()){if(38===t.nextCode())return t.go(1),{type:I.BINARY,operator:76,segs:[n,e(t)]};t.go(-1)}return n}(t);t.goUntil();if(124===t.currentCode()){if(124===t.nextCode())return t.go(1),{type:I.BINARY,operator:248,segs:[n,e(t)]};t.go(-1)}return n}(e);if(e.goUntil(),63===e.currentCode()){e.go(1);var n=L(e);if(e.goUntil(),58===e.currentCode())return e.go(1),{type:I.TERTIARY,segs:[t,n,L(e)]}}return t}function D(e){var t=M(e);switch(t){case"true":case"false":return{type:I.BOOL,value:"true"===t}}var n=P([{type:I.STRING,value:t}]);e:for(;;)switch(e.currentCode()){case 46:e.go(1),n.paths.push({type:I.STRING,value:M(e)});break;case 91:e.go(1),n.paths.push(L(e)),e.goUntil(93);break;default:break e}return n}function U(e){switch(e.goUntil(),e.currentCode()){case 33:return e.go(1),{type:I.UNARY,expr:U(e)};case 34:case 39:return function(e){var t,n=e.currentCode(),r=e.index;e:for(;t=e.nextCode();)switch(t){case 92:e.go(1);break;case n:e.go(1);break e}var i=e.cut(r,e.index);return{type:I.STRING,value:new Function("return "+i)()}}(e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e){var t=e.match(/\s*(-?[0-9]+(\.[0-9]+)?)/g);return{type:I.NUMBER,value:t[1]-0}}(e);case 40:return function(e){e.go(1);var t=L(e);return e.goUntil(41),t}(e)}return D(e)}function B(e){for(var t=U(e);;){e.goUntil();var n=e.currentCode();switch(n){case 37:case 42:case 47:e.go(1),t={type:I.BINARY,operator:n,segs:[t,U(e)]};continue}break}return t}function H(e){for(var t=B(e);;){e.goUntil();var n=e.currentCode();switch(n){case 43:case 45:e.go(1),t={type:I.BINARY,operator:n,segs:[t,B(e)]};continue}break}return t}function F(e){var t=H(e);e.goUntil();var n=e.currentCode();switch(n){case 60:case 62:return 61===e.nextCode()&&(n+=61,e.go(1)),{type:I.BINARY,operator:n,segs:[t,H(e)]}}return t}function $(e){if("object"==typeof e&&e.type)return e;var t=L(new O(e));return t.raw=e,t}function q(e,t){e.goUntil();var n=D(e),r=[];if(e.goUntil(40))for(;!e.goUntil(41);)r.push(L(e)),e.goUntil(44);else t&&(r=t);return{type:I.CALL,name:n,args:r}}function G(e,t){var n=q(new O(e),t);return n.raw=e,n}function Y(e){for(var t=new O(e),n={type:I.INTERP,expr:L(t),filters:[],raw:e};t.goUntil(124);){var r=q(t);switch(r.name.paths[0].value){case"html":break;case"raw":n.original=1;break;default:n.filters.push(r)}}return n}var z={lt:"<",gt:">",nbsp:" ",quot:'"',emsp:" ",ensp:" ",thinsp:" ",copy:"©",reg:"®",zwnj:"‌",zwj:"‍",amp:"&"};function X(e){return e.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+\\]/g,function(e){return"\\"+e})}function W(e,t){t=t||["{{","}}"];var n,r=new RegExp(X(t[0])+"\\s*([\\s\\S]+?)\\s*"+X(t[1]),"ig"),i=new O(e),o=0,s={type:I.TEXT,segs:[]};function a(e){var t;e&&s.segs.push({type:I.STRING,literal:e,value:(t=e,t.replace(/&#([0-9]+);/g,function(e,t){return String.fromCharCode(+t)}).replace(/&#x([0-9a-f]+);/gi,function(e,t){return String.fromCharCode(parseInt(t,16))}).replace(/&([a-z]+);/gi,function(e,t){return z[t]||e}))})}for(;null!=(n=i.match(r));){a(i.cut(o,i.index-n[0].length));var c=Y(n[1]);s.original=s.original||c.original,s.segs.push(c),o=i.index}return a(i.cut(o)),1===s.segs.length&&s.segs[0].type===I.STRING&&(s.value=s.segs[0].value),s}var V={for:function(e){var t=new O(e),n=t.match(/^\s*([\$0-9a-z_]+)(\s*,\s*([\$0-9a-z_]+))?\s+in\s+/gi);if(n)return{item:$(n[1]),index:$(n[3]||"$index"),value:D(t)};throw new Error("[SAN FATAL] for syntax error: "+e)},ref:function(e,t){return{value:W(e,t.delimiters)}},if:function(e){return{value:$(e.replace(/(^\{\{|\}\}$)/g,""))}},elif:function(e){return{value:$(e.replace(/(^\{\{|\}\}$)/g,""))}},else:function(e){return{value:{}}},bind:function(e){return{value:$(e.replace(/(^\{\{|\}\}$)/g,""))}},html:function(e){return{value:$(e.replace(/(^\{\{|\}\}$)/g,""))}},transition:function(e){return{value:G(e)}}};function J(e){var t=e.expr;if(t.type===I.TEXT)switch(t.segs.length){case 0:e.expr={type:I.BOOL,value:!0};break;case 1:(t=e.expr=t.segs[0]).type===I.INTERP&&0===t.filters.length&&(e.expr=t.expr)}}function K(e,t,n,r){var i,o,s=t.indexOf("-");switch(s>0&&(o=t.slice(0,s),i=t.slice(s+1)),o){case"on":var a,c={name:i,modifier:{}};for(e.events.push(c);(a=n.indexOf(":"))>0;){var l=n.slice(0,a);if(!/^[a-z]+$/i.test(l))break;c.modifier[l]=!0,n=n.slice(a+1)}c.expr=G(n,[P([{type:I.STRING,value:"$event"}])]);break;case"san":case"s":!function(e,t,n,r){"else-if"===t&&(t="elif");var i=V[t];i&&((e.directives[t]=i(n,r)).raw=n)}(e,i,n,r);break;case"prop":Q(e,i,n,r);break;case"var":e.vars||(e.vars=[]),i=j(i),e.vars.push({name:i,expr:$(n.replace(/(^\{\{|\}\}$)/g,""))});break;default:Q(e,t,n,r)}}function Q(e,t,n,r){var i=n.match(/^\{=\s*(.*?)\s*=\}$/);if(i)e.props.push({name:t,expr:$(i[1]),x:1,raw:n});else{var o={name:t,expr:W(n,r.delimiters),raw:n};switch(t){case"class":case"style":l(o.expr.segs,function(e){e.type===I.INTERP&&e.filters.push({type:I.CALL,name:P([{type:I.STRING,value:"_"+o.name}]),args:[]})});break;case"checked":"input"===e.tagName&&J(o)}e.props.push(o)}}function Z(e,t){for(var n=["ROOT"],r=1,i=e.length;r<i;r++)n.push(e[r].tagName);return t&&n.push(t),n.join(">")}function ee(e,t){(t=t||{}).trimWhitespace=t.trimWhitespace||"none";var n=k();if("string"!=typeof e)return n;for(var r,i=new O(e=e.replace(/<!--([\s\S]*?)-->/gm,"").replace(/(^\s+|\s+$)/g,"")),o=/<(\/)?([a-z0-9-]+)\s*/gi,s=/([-:0-9a-z\(\)\[\]]+)(\s*=\s*(['"])([^\3]*?)\3)?\s*/gi,a=n,c=[n],l=0,p=0;null!=(r=i.match(o));){var u=r[1],d=r[2].toLowerCase();if(x(e.slice(p,i.index-r[0].length)),u&&62===i.currentCode()){var h=l;if(N[d])throw new Error("[SAN ERROR] "+Z(c,d)+" is a `auto closed` tag, so it cannot be closed with </"+d+">");if(c[h].tagName!==d&&("table"!==d||"tbody"!==c[h].tagName))throw new Error("[SAN ERROR] "+Z(c)+" is closed with "+d);for(;h>0&&c[h].tagName!==d;)h--;h>0&&(a=c[l=h-1]),i.go(1)}else{if(u){if(60===i.currentCode())throw new Error("[SAN ERROR] "+Z(c)+"'s close tag not closed");throw new Error("[SAN ERROR] "+Z(c)+"'s close tag has attributes")}if(!u){for(var f=k({tagName:d}),v=N[d];;){var m=i.currentCode();if(62===m){i.go(1);break}if(47===m&&62===i.charCode(i.index+1)){i.go(2),v=1;break}if(60===m)throw new Error("[SAN ERROR] "+Z(c,d)+" is not closed");var y=i.match(s);if(y){if(61===i.charCode(y.index+y[1].length)&&!y[2])throw new Error("[SAN ERROR] "+Z(c,d)+" attribute `"+y[1]+'` is not wrapped with ""');K(f,y[1],y[2]?y[4]:"",t)}}if(f.directives.else||f.directives.elif)for(var g=a.children.length;g--;){var w=a.children[g];if(!w.textExpr){if(!w.directives.if)throw new Error("[SAN FATEL] else not match if.");w.elses=w.elses||[],w.elses.push(f);break}a.children.splice(g,1)}else{if("tr"===f.tagName&&"table"===a.tagName){var b=k({tagName:"tbody"});a.children.push(b),a=b,c[++l]=b}a.children.push(f)}v||(a=f,c[++l]=f)}}p=i.index}return x(i.cut(p)),n;function x(e){switch(t.trimWhitespace){case"blank":/^\s+$/.test(e)&&(e=null);break;case"all":e=e.replace(/(^\s+|\s+$)/g,"")}e&&a.children.push(k({textExpr:W(e,t.delimiters)}))}}var te={url:encodeURIComponent,_class:function(e){return e instanceof Array?e.join(" "):e},_style:function(e){if("object"==typeof e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}return e},_sep:function(e,t){return e?t+e:e}};function ne(e,t,n){if(null!=e.value)return e.value;var r=se.get(t,e);if(null==r){switch(e.type){case I.UNARY:r=!ne(e.expr,t,n);break;case I.BINARY:var i=ne(e.segs[0],t,n),o=ne(e.segs[1],t,n);switch(e.operator){case 37:r=i%o;break;case 43:r=i+o;break;case 45:r=i-o;break;case 42:r=i*o;break;case 47:r=i/o;break;case 60:r=i<o;break;case 62:r=i>o;break;case 76:r=i&&o;break;case 94:r=i!=o;break;case 121:r=i<=o;break;case 122:r=i==o;break;case 123:r=i>=o;break;case 155:r=i!==o;break;case 183:r=i===o;break;case 248:r=i||o}break;case I.TERTIARY:r=ne(e.segs[ne(e.segs[0],t,n)?1:2],t,n);break;case I.ACCESSOR:r=t.get(e);break;case I.INTERP:if(r=ne(e.expr,t,n),n)for(var s=0,a=e.filters.length;s<a;s++){var c=e.filters[s],l=c.name.paths[0].value;n.filters[l]?r=n.filters[l].apply(n,[r].concat(re(c.args,t,n))):te[l]&&(r=te[l](r,c.args[0]?c.args[0].value:""))}null==r&&(r="");break;case I.TEXT:var p="";for(s=0,a=e.segs.length;s<a;s++){var u=e.segs[s];p+=u.value||ne(u,t,n)}return p}se.set(t,e,r)}return r}function re(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(ne(e[i],t,n));return r}var ie={},oe=1,se={clear:function(){oe||(oe=1,ie={})},set:function(e,t,n){t.raw&&(oe=0,(ie[e.id]=ie[e.id]||{})[t.raw]=n)},get:function(e,t){if(t.raw&&ie[e.id])return ie[e.id][t.raw]}};function ae(e,t,n){for(var r=0,i=t.length;r<i;r++)if(ce(e,t[r],n))return 1;return 0}function ce(e,t,n){switch(t.type){case I.ACCESSOR:for(var r=t.paths,i=r.length,o=e.paths,s=o.length,a=1,c=0;c<i;c++){var p=r[c];if(p.type===I.ACCESSOR&&ce(e,p,n))return 1;a&&c<s&&(p.value||ne(p,n))!=(o[c].value||ne(o[c],n))&&(a=0)}return a&&(a=Math.max(1,s-i+2)),a;case I.UNARY:return ce(e,t.expr,n)?1:0;case I.TEXT:case I.BINARY:case I.TERTIARY:return ae(e,t.segs,n);case I.INTERP:var u;return ce(e,t.expr,n)?1:(l(t.filters,function(t){return!(u=ae(e,t.args,n))}),u?1:0)}return 0}var le=1,pe=2;function ue(e){return this[e]}var de={start:{},compiled:{is:ue,compiled:!0},inited:{is:ue,compiled:!0,inited:!0},created:{is:ue,compiled:!0,inited:!0,created:!0},attached:{is:ue,compiled:!0,inited:!0,created:!0,attached:!0},leaving:{is:ue,compiled:!0,inited:!0,created:!0,attached:!0,leaving:!0},detached:{is:ue,compiled:!0,inited:!0,created:!0,detached:!0},disposed:{is:ue,disposed:!0}},he={TEXT:1,IF:2,FOR:3,ELEM:4,CMPT:5,SLOT:6,TPL:7};function fe(e,t){var n=e.hotspot.props[t];if(null!=n)return e.props[n]}var ve={readonly:"readOnly",cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder",for:"htmlFor"},me={prop:function(e,t,n,r){var i=ve[n]||n;t=null==t?"":t,i in e?e[i]=t:e.setAttribute(n,t)},output:function(e,t,n){n.set(t.expr,e.el[t.name],{target:{id:e.id,prop:t.name}})}},ye={prop:function(e,t,n){e.setAttribute(n,t)}},ge={prop:function(e,t,n,r,i){e[ve[n]||n]=!!(i&&""===i.raw||t&&"false"!==t&&"0"!==t)}},we={style:{prop:function(e,t){e.style.cssText=t}},class:{prop:function(e,t){e.className=t}},slot:{prop:s},readonly:ge,disabled:ge,autofocus:ge,required:ge,draggable:ge},be={checkbox:function(e,t){var n=!1;return l(e,function(e){return!(n=e===t)}),n},radio:function(e,t){return e===t}};var xe={input:{multiple:ge,checked:{prop:function(e,t,n,r){var i=function(e,t,n){var r=fe(e.aNode,"value"),i=fe(e.aNode,"type");if(r&&i){var o=ne(i.expr,e.scope,e.owner);if(be[o]){var s=fe(e.aNode,"checked");return s.hintExpr||(s.hintExpr=r.expr),!!be[o](t,ne(r.expr,e.scope,e.owner))}}}(r,t);ge.prop(e,null!=i?i:t,"checked",r)},output:function(e,t,n){var r=e.el,i=fe(e.aNode,"value"),o=fe(e.aNode,"type")||{};if(i&&o)switch(o.raw){case"checkbox":return void n[r.checked?"push":"remove"](t.expr,r.value);case"radio":return void(r.checked&&n.set(t.expr,r.value,{target:{id:e.id,prop:t.name}}))}me.output(e,t,n)}}},option:{value:{prop:function(e,t,n,r){me.prop(e,t,n,r),function(e,t){var n=e.parent;for(;n&&"select"!==n.tagName;)n=n.parent;if(n){var r,i,o=null;if((r=fe(n.aNode,"value"))&&(i=r.expr)&&(o=n.nodeType===he.CMPT?ne(i,n.data,n):ne(i,n.scope,n.owner)||""),o===t)return 1}}(r,t)&&(e.selected=!0)}}},select:{value:{prop:function(e,t){e.value=t||""},output:me.output}}};function _e(e,t){if(h[e])return ye;var n=xe[e];n||(n=xe[e]={});var r=n[t];return r||(r=we[t]||me,n[t]=r),r}function Ee(e,t,n){var r=e.option.target;return r&&r.id===t.id&&(!n||r.prop===n)}function Ne(e,t,n){for(var r=e,i=0;null!=r&&i<t.paths.length;i++)r=r[ne(t.paths[i],n)];return r}function Ce(e,t){this.id=o(),this.parent=t,this.raw=e||{},this.listeners=[]}function Re(e,t,n,r){if(0===t.length)return n;var i,o=ne(t[0],r);if(e instanceof Array){var s=+o;return(i=e.slice(0))[isNaN(s)?o:s]=Re(e[s],t.slice(1),n,r),i}if("object"==typeof e){for(var a in i={},e)a!==o&&(i[a]=e[a]);return i[o]=Re(e[o]||{},t.slice(1),n,r),i}return e}function Te(e,t,n,r){var i=Ne(this,e.expr.name,n);if("function"==typeof i){var o=new Ce({$event:t?r:r||window.event},n);i.apply(this,re(e.expr.args,o,this))}}Ce.prototype.checkDataTypes=function(){this.typeChecker&&this.typeChecker(this.raw)},Ce.prototype.setTypeChecker=function(e){this.typeChecker=e},Ce.prototype.listen=function(e){"function"==typeof e&&this.listeners.push(e)},Ce.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)e&&this.listeners[t]!==e||this.listeners.splice(t,1)},Ce.prototype.fire=function(e){if(!(e.option.silent||e.option.silence||e.option.quiet))for(var t=0;t<this.listeners.length;t++)this.listeners[t].call(this,e)},Ce.prototype.get=function(e,t){var n=this.raw;if(!e)return n;var r=(e=$(e)).paths;if(t=t||this,null==(n=n[r[0].value])&&this.parent)n=this.parent.get(e,t);else for(var i=1,o=r.length;null!=n&&i<o;i++)n=n[r[i].value||ne(r[i],t)];return n},Ce.prototype.set=function(e,t,n){n=n||{};var r=e;if((e=$(e)).type!==I.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data set: "+r);(this.get(e)!==t||n.force)&&(se.clear(),this.raw=Re(this.raw,e.paths,t,this),this.fire({type:le,expr:e,value:t,option:n}),this.checkDataTypes())},Ce.prototype.merge=function(e,t,n){n=n||{};var r=e;if((e=$(e)).type!==I.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data merge: "+r);if("object"!=typeof this.get(e))throw new Error("[SAN ERROR] Merge Expects a Target of Type 'object'; got "+typeof oldValue);if("object"!=typeof t)throw new Error("[SAN ERROR] Merge Expects a Source of Type 'object'; got "+typeof t);for(var i in t)this.set(P(e.paths.concat([{type:I.STRING,value:i}])),t[i],n)},Ce.prototype.apply=function(e,t,n){var r=e;if((e=$(e)).type!==I.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data apply: "+r);var i=this.get(e);if("function"!=typeof t)throw new Error("[SAN ERROR] Invalid Argument's Type in Data apply: Expected Function but got "+typeof t);this.set(e,t(i),n)},Ce.prototype.splice=function(e,t,n){n=n||{};var r=e;if((e=$(e)).type!==I.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data splice: "+r);var i=this.get(e),o=[];if(i instanceof Array){var s=t[0],a=i.length;s>a?s=a:s<0&&(s=a+s)<0&&(s=0);var c=i.slice(0);o=c.splice.apply(c,t),se.clear(),this.raw=Re(this.raw,e.paths,c,this),this.fire({expr:e,type:pe,index:s,deleteCount:o.length,value:o,insertions:t.slice(2),option:n})}return this.checkDataTypes(),o},Ce.prototype.push=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[r.length,0,t],n),r.length+1},Ce.prototype.pop=function(e,t){var n=this.get(e);if(n instanceof Array){var r=n.length;if(r)return this.splice(e,[r-1,1],t)[0]}},Ce.prototype.shift=function(e,t){return this.splice(e,[0,1],t)[0]},Ce.prototype.unshift=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[0,0,t],n),r.length+1},Ce.prototype.removeAt=function(e,t,n){this.splice(e,[t,1],n)},Ce.prototype.remove=function(e,t,n){var r=this.get(e);if(r instanceof Array)for(var i=r.length;i--;)if(r[i]===t){this.splice(e,[i,1],n);break}};var Ae=d("div,span,input,button,textarea,form,label,dl,dt,dd,ul,ol,li,a,b,u,h1,h2,h3,h4,h5,h6"),Se="undefined"!=typeof window;function Oe(e,t,n){t&&(n?t.insertBefore(e,n):t.appendChild(e))}function ke(e){if("undefined"!=typeof window&&"undefined"!=typeof navigator&&window.document&&function(e){return/^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(e.tagName)}(e)){var t='[SAN WARNING] set html for element "'+e.tagName+'" may cause an error in old IE';if("object"!=typeof console||!console.warn)throw new Error(t);console.warn(t)}}function je(e){for(var t=[],n=e;n;){switch(n.nodeType){case he.ELEM:t.unshift(n.tagName);break;case he.IF:t.unshift("if");break;case he.FOR:t.unshift("for["+n.anode.directives.for.raw+"]");break;case he.SLOT:t.unshift("slot["+(n.name||"default")+"]");break;case he.TPL:t.unshift("template");break;case he.CMPT:t.unshift("component["+(n.subTag||"root")+"]");break;case he.TEXT:t.unshift("text")}n=n.parent}return t}function Ie(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,i){var o=i.current;if(o)switch(o.nodeType){case 8:if("s-text"===o.data)for(this.sel=o,o.data=this.id,i.goNext();;){if(!(o=i.current))throw new Error("[SAN REVERSE ERROR] Text end flag not found. \nPaths: "+je(this).join(" > "));if(a="text",8===(s=o).nodeType&&s.data==="/s-"+a){this.el=o,i.goNext(),o.data=this.id;break}i.goNext()}break;case 3:i.goNext(),this.aNode.textExpr.original||(this.el=o)}else this.el=document.createTextNode(""),Oe(this.el,i.target,i.current)}var s,a}Ie.prototype.nodeType=he.TEXT,Ie.prototype.attach=function(e,t){if(this.content=ne(this.aNode.textExpr,this.scope,this.owner),this.aNode.textExpr.original){this.sel=document.createComment(this.id),Oe(this.sel,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t);var n=document.createElement("script");e.insertBefore(n,this.el),n.insertAdjacentHTML("beforebegin",this.content),e.removeChild(n)}else this.el=document.createTextNode(this.content),Oe(this.el,e,t)},Ie.prototype.dispose=function(){this._prev=null,this.el=null,this.sel=null};var Pe=Se&&("string"==typeof document.createTextNode("").textContent?"textContent":"data");function Me(e,t){var n=[];for(var r in e)n.push(r);for(var r in t)!e[r]&&n.push(r);return n}function Le(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(!r.overview){var i=r.expr.paths;r.overview=i[0].value,i.length>1&&(r.extOverview=i[0].value+"."+i[1].value,r.wildOverview=i[0].value+".*")}if(t[r.overview]||r.wildOverview&&t[r.wildOverview]||r.extOverview&&t[r.extOverview])return!0}}function De(e){this.raw=[],this.index=0,this.target=e;for(var t,n=e.firstChild;n;){switch(t=n.nextSibling,n.nodeType){case 3:/^\s*$/.test(n.data||n.textContent)?v(n):this.raw.push(n);break;case 1:case 8:this.raw.push(n)}n=t}this.current=this.raw[this.index],this.next=this.raw[this.index+1]}function Ue(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.lifeCycle=de.start,this.children=[],this._elFns=[],this.parentComponent=r.nodeType===he.CMPT?r:r.parentComponent,this.id=o(),xt(this),e.directives.bind&&(this._spreadData=ne(e.directives.bind.value,this.scope,this.owner)),this._toPhase("inited"),i){var s=i.current;if(!s)throw new Error("[SAN REVERSE ERROR] Element not found. \nPaths: "+je(this).join(" > "));if(1!==s.nodeType)throw new Error("[SAN REVERSE ERROR] Element type not match, expect 1 but "+s.nodeType+".\nPaths: "+je(this).join(" > "));if(s.tagName.toLowerCase()!==this.tagName)throw new Error("[SAN REVERSE ERROR] Element tagName not match, expect "+this.tagName+" but meat "+s.tagName.toLowerCase()+".\nPaths: "+je(this).join(" > "));this.el=s,i.goNext(),nt(this),this._attached()}}function Be(e){e.el=null,e.sel=null,e.owner=null,e.scope=null,e.aNode=null,e.parent=null,e.parentComponent=null,e.children=null,e._toPhase&&e._toPhase("disposed"),e._ondisposed&&e._ondisposed()}function He(e,t,n,r){var i=n.nodeType===he.CMPT,o=i?n:n.childOwner||n.owner;if(r=r||(i?n.data:n.childScope||n.scope),e.textExpr)return new Ie(e,o,r,n,t);if(e.directives.if)return new et(e,o,r,n,t);if(e.directives.for)return new Qe(e,o,r,n,t);if(Ae[e.tagName])return new Ue(e,o,r,n,t);switch(e.tagName){case"slot":return new ze(e,o,r,n,t);case"template":return new tt(e,o,r,n,t);default:var s=o.getComponentType(e);if(s)return new s({aNode:e,owner:o,scope:r,parent:n,subTag:e.tagName,reverseWalker:t})}return new Ue(e,o,r,n,t)}function Fe(e,t,n){for(var r=e.children,i=r&&r.length;i--;)r[i].dispose(t,n)}function $e(e,t){for(var n=0,r=e.children.length;n<r;n++)e.children[n]._update(t)}function qe(e){this.lifeCycle=de[e]||this.lifeCycle}function Ge(e,t,n){var r=t.nodeType===he.CMPT,i=r?t:t.childOwner||t.owner;if(n=n||(r?t.data:t.childScope||t.scope),e.textExpr)return new Ie(e,i,n,t);if(e.directives.if)return new et(e,i,n,t);if(e.directives.for)return new Qe(e,i,n,t);if(Ae[e.tagName])return new Ue(e,i,n,t);switch(e.tagName){case"slot":return new ze(e,i,n,t);case"template":return new tt(e,i,n,t);default:var o=i.getComponentType(e);if(o)return new o({aNode:e,owner:i,scope:n,parent:t,subTag:e.tagName})}return new Ue(e,i,n,t)}function Ye(e,t){this.sel=document.createComment(this.id),Oe(this.sel,e,t),function(e,t,n){t=t||e.el;for(var r=e.aNode.children,i=0;i<r.length;i++){var o=Ge(r[i],e);e.children.push(o),o.attach(t,n)}}(this,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t),this._toPhase("attached")}function ze(e,t,n,r,i){var s=k();this.aNode=s,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===he.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=de.start,this.children=[],this.nameBind=fe(e,"name"),this.nameBind&&(this.isNamed=!0,this.name=ne(this.nameBind.expr,this.scope,this.owner));var a,c=t.givenSlots;c&&(a=this.isNamed?c.named[this.name]:c.noname),a&&(this.isInserted=!0),s.children=a||e.children.slice(0);var p=this;s.vars=e.vars;var u={};l(s.vars,function(e){p.isScoped=!0,u[e.name]=ne(e.expr,n,t)}),this.isInserted&&(this.childOwner=t.owner,this.childScope=t.scope),this.isScoped&&(this.childScope=new Ce(u,this.childScope||this.scope)),t.slotChildren.push(this),i&&(this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current),l(this.aNode.children,function(e){p.children.push(He(e,i,p))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached"))}function Xe(e,t){var n={};for(var r in t=t||{},e)t[r]||(n[r]=e[r]);return n}function We(e){Fe(this,e,1),e||v(this.el),Be(this)}function Ve(){this.el=this.el||document.createComment(this.id)}function Je(e,t,n){this.id=o(),this.parent=e.scope,this.raw={},this.listeners=[],this.directive=e.aNode.directives.for,this.raw[this.directive.item.raw]=t,this.raw[this.directive.index.raw]=n}function Ke(e,t,n){var r=new Je(e,t,n);return Ge(e.itemANode,e,r)}function Qe(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===he.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.itemANode=k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:Xe(e.directives,{for:1})}),this.param=e.directives.for,i){var s=this;l(ne(this.param.value,this.scope,this.owner),function(e,t){var n=new Je(s,e,t),r=He(s.itemANode,i,s,n);s.children.push(r)}),this._create(),Oe(this.el,i.target,i.current)}}function Ze(e){return k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:Xe(e.directives,{if:1,else:1,elif:1})})}function et(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===he.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.cond=this.aNode.directives.if.value,i){if(ne(this.cond,this.scope,this.owner))this.elseIndex=-1,this.children[0]=He(Ze(e),i,this);else{var s=this;l(e.elses,function(e,t){var n=e.directives.elif;if(!n||n&&ne(n.value,s.scope,s.owner))return s.elseIndex=t,s.children[0]=He(Ze(e),i,s),!1})}this._create(),Oe(this.el,i.target,i.current)}}function tt(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===he.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=de.start,this.children=[],i){this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current);var s=this;l(this.aNode.children,function(e){s.children.push(He(e,i,s))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached")}}function nt(e){if(!e.aNode.directives.html){var t=new De(e.el);l(e.aNode.children,function(n){e.children.push(He(n,t,e))})}}function rt(e,t,n){var r=n.name;_e(e.tagName,r).prop(e.el,t,r,e,n)}Ie.prototype._update=function(e){if(!this.aNode.textExpr.value)for(var t=e?e.length:0;t--;)if(ce(e[t].expr,this.aNode.textExpr,this.scope)){var n=ne(this.aNode.textExpr,this.scope,this.owner);if(n!==this.content)if(this.content=n,this.aNode.textExpr.original){for(var r=this.sel.nextSibling,i=this.el.parentNode;r!==this.el;){var o=r;r=r.nextSibling,v(o)}ke(i);var s=document.createElement("script");i.insertBefore(s,this.el),s.insertAdjacentHTML("beforebegin",n),i.removeChild(s)}else this.el[Pe]=n;return}},De.prototype.goNext=function(){this.current=this.raw[++this.index],this.next=this.raw[this.index+1]},Ue.prototype.nodeType=he.ELEM,Ue.prototype.attach=ct,Ue.prototype.detach=ut,Ue.prototype.dispose=dt,Ue.prototype._create=st,Ue.prototype._toPhase=qe,Ue.prototype._onEl=ht,Ue.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||bt(this,this.disposeNoDetach,this.disposeNoTransition):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Ue.prototype._update=function(e){if(Le(e,this.aNode.hotspot.data)){var t=this.aNode.directives.bind;if(t)for(var n=e.length;n--;)if(ce(e[n].expr,t.value,this.scope)){for(var r=ne(t.value,this.scope,this.owner),i=Me(r,this._spreadData),o=0;o<i.length;o++){var s=i[o],a=r[s];s in this.aNode.hotspot.props||a===this._spreadData[s]||_e(this.tagName,s).prop(this.el,a,s,this)}this._spreadData=r;break}for(var c=this.aNode.hotspot.dynamicProps,l=(o=0,c.length);o<l;o++)for(var p=c[o],u=0,d=e.length;u<d;u++){var h=e[u];if(!Ee(h,this,p.name)&&(ce(h.expr,p.expr,this.scope)||p.hintExpr&&ce(h.expr,p.hintExpr,this.scope))){rt(this,ne(p.expr,this.scope,this.owner),p);break}}var f=this.aNode.directives.html;if(f){for(n=e.length;n--;)if(ce(e[n].expr,f.value,this.scope))return ke(this.el),this.el.innerHTML=ne(f.value,this.scope,this.owner),!1}else $e(this,e)}},Ue.prototype._attached=wt,ze.prototype.nodeType=he.SLOT,ze.prototype.dispose=function(e,t){this.childOwner=null,this.childScope=null,Fe(this,e,t),Be(this)},ze.prototype.attach=Ye,ze.prototype._toPhase=qe,ze.prototype._update=function(e,t){var n=this;if(this.nameBind&&ne(this.nameBind.expr,this.scope,this.owner)!==n.name)return this.owner._notifyNeedReload(),!1;if(t)this.isInserted&&$e(this,e);else if(this.isScoped){l(this.aNode.vars,function(e){n.childScope.set(e.name,ne(e.expr,n.scope,n.owner))});var r=[];l(e,function(e){n.isInserted||r.push(e),l(n.aNode.vars,function(t){var i=t.name,o=ce(e.expr,t.expr,n.scope);o<1||(e.type!==pe?r.push({type:le,expr:P([{type:I.STRING,value:i}]),value:n.childScope.get(i),option:e.option}):2===o&&r.push({expr:P([{type:I.STRING,value:i}]),type:pe,index:e.index,deleteCount:e.deleteCount,value:e.value,insertions:e.insertions,option:e.option}))})}),$e(this,r)}else this.isInserted||$e(this,e)},Je.prototype.exprResolve=function(e){var t=this.directive,n=this;function r(e){return e.type===I.ACCESSOR&&e.paths[0].value===t.item.paths[0].value?P(t.value.paths.concat({type:I.NUMBER,value:n.get(t.index)},e.paths.slice(1))):e}var i=[];return l((e=r(e)).paths,function(e){i.push(e.type===I.ACCESSOR&&e.paths[0].value===t.index.paths[0].value?{type:I.NUMBER,value:n.get(t.index)}:r(e))}),P(i)},c(Je,Ce),l(["set","remove","unshift","shift","push","pop","splice"],function(e){Je.prototype["_"+e]=Ce.prototype[e],Je.prototype[e]=function(t){t=this.exprResolve($(t)),se.clear(),this.parent[e].apply(this.parent,[t].concat(Array.prototype.slice.call(arguments,1)))}}),Qe.prototype.nodeType=he.FOR,Qe.prototype._create=Ve,Qe.prototype.dispose=We,Qe.prototype.attach=function(e,t){this._create(),Oe(this.el,e,t);for(var n=this.el||e.firstChild,r=ne(this.param.value,this.scope,this.owner),i=r&&r.length||0,o=0;o<i;o++){var s=Ke(this,r[o],o);this.children.push(s),s.attach(e,n)}},Qe.prototype.detach=function(){this.lifeCycle.attached&&(Fe(this),this.children=[],v(this.el),this.lifeCycle=de.detached)},Qe.prototype._update=function(e){var t=this,n=this.aNode.directives.transition,r=this.children.length,i=new Array(r);function o(e){for(var t=0,n=i.length;t<n;t++)(i[t]=i[t]||[]).push(e)}for(var s,a=[],c=this.el.parentNode,l=c.firstChild,p=c.lastChild,u=r>0&&l===this.children[0].el&&(p===this.el||p===this.children[r-1].el)||0===r&&l===this.el&&p===this.el,d=ne(this.param.value,this.scope,this.owner),h=d&&d.length||0,f=0,v=e.length;f<v;f++){var m=e[f],y=ce(m.expr,this.param.value,this.scope);if(y){if(y>2){var g=m.expr.paths,w=this.param.value.paths.length,b=+ne(g[w],this.scope,this.owner);isNaN(b)?o(m):(m={type:m.type,expr:P(this.param.item.paths.concat(g.slice(w+1))),value:m.value,index:m.index,deleteCount:m.deleteCount,insertions:m.insertions,option:m.option},(i[b]=i[b]||[]).push(m),this.children[b]&&(m.type===pe?this.children[b].scope._splice(m.expr,[].concat(m.index,m.deleteCount,m.insertions),{silent:1}):this.children[b].scope._set(m.expr,m.value,{silent:1})))}else if(m.type!==pe){r>h&&(a=a.concat(this.children.slice(h)),i=i.slice(0,h),this.children=this.children.slice(0,h));for(var x=0;x<h;x++)(i[x]=i[x]||[]).push({type:le,option:m.option,expr:P(this.param.item.paths.slice(0)),value:d[x]}),y<2&&i[x].push(m),this.children[x]?this.children[x].scope._set(this.param.item,d[x],{silent:1}):this.children[x]=0;s=1}else if(2===y&&m.type===pe&&!s){var _=m.index,E=m.deleteCount,N=m.insertions.length,C=N-E;if(C){var R={type:le,option:m.option,expr:this.param.index};for(x=_+E;x<this.children.length;x++)(i[x]=i[x]||[]).push(R),this.children[x]&&this.children[x].scope._set(R.expr,x-E+N,{silent:1})}for(var T=E;T--;){if(T<N)(i[x=_+T]=i[x]||[]).push({type:le,option:m.option,expr:P(this.param.item.paths.slice(0)),value:m.insertions[T]}),this.children[x]&&this.children[x].scope._set(this.param.item,m.insertions[T],{silent:1})}if(C<0)a=a.concat(this.children.splice(_+N,-C)),i.splice(_+N,-C);else if(C>0){var A=[_+E,0].concat(new Array(C));this.children.splice.apply(this.children,A),i.splice.apply(i,A)}}}else o(m)}var S=this.children.length;if(S!==r){var O={type:le,option:{},expr:P(this.param.value.paths.concat({type:I.STRING,value:"length"}))};Le([O],this.aNode.hotspot.data)&&o(O)}this._doCreateAndUpdate=U;var k=!n&&u&&0===S,j=0;for(x=0;x<a.length;x++){var M=a[x];M?(M._ondisposed=D,M.dispose(k,k)):D()}if(k){var L=c.cloneNode(!1);c.parentNode.replaceChild(L,c),this.el=document.createComment(this.id),L.appendChild(this.el)}function D(){++j===a.length&&U===t._doCreateAndUpdate&&U()}function U(){if(t._doCreateAndUpdate=null,!k){var e=t.el;if(0===r&&u)for(var n=0;n<S;n++)t.children[n]=Ke(t,d[n],n),t.children[n].attach(c,e);else{var o=-1;for(n=0;n<S;n++){var s=t.children[n];if(s)i[n]&&s._update(i[n]);else{if(o<n)for(o=n+1,e=null;o<S;){var a=t.children[o];if(a){e=a.sel||a.el;break}o++}t.children[n]=Ke(t,d[n],n),t.children[n].attach(c,e||t.el)}}}}}0===a.length&&U()},et.prototype.nodeType=he.IF,et.prototype._create=Ve,et.prototype.dispose=We,et.prototype.attach=function(e,t){var n,r,i=this;ne(this.cond,this.scope,this.owner)?(r=Ge(Ze(i.aNode),i),n=-1):l(i.aNode.elses,function(e,t){var o=e.directives.elif;if(!o||o&&ne(o.value,i.scope,i.owner))return r=Ge(Ze(e),i),n=t,!1}),r&&(i.children[0]=r,r.attach(e,t),i.elseIndex=n),this._create(),Oe(this.el,e,t)},et.prototype._update=function(e){var t,n=this,r=n.aNode;if(ne(this.cond,this.scope,this.owner)?t=-1:l(n.aNode.elses,function(e,i){var o=e.directives.elif;if(o&&ne(o.value,n.scope,n.owner)||!o)return t=i,r=e,!1}),t===n.elseIndex)$e(n,e);else{var i=n.children[0];n.children=[],i?(i._ondisposed=o,i.dispose()):o(),n.elseIndex=t}function o(){if(void 0!==t){var e=Ge(Ze(r),n);e.attach(n.el.parentNode,n.el),n.children[0]=e}}},tt.prototype.nodeType=he.TPL,tt.prototype.attach=Ye,tt.prototype.dispose=function(e,t){Fe(this,e,t),Be(this)},tt.prototype._toPhase=qe,tt.prototype._update=function(e){$e(this,e)};var it,ot={class:1,style:1,id:1};function st(){if(!this.lifeCycle.created){var e=this.nodeType===he.CMPT,t=this.aNode.hotspot.sourceNode,n=this.aNode.props;for(var r in t?(this.el=t.cloneNode(),n=this.aNode.hotspot.dynamicProps):this.el=f(this.tagName),this._spreadData)_e(this.tagName,r).prop(this.el,this._spreadData[r],r,this);for(var i=0,o=n.length;i<o;i++){var s=n[i],a=e?ne(s.expr,this.data,this):ne(s.expr,this.scope,this.owner);!a&&ot[s.name]||rt(this,a,s)}this._toPhase("created")}}function at(e,t,n){if(e._create(),Oe(e.el,t,n),!e._contentReady){var r=e.aNode.directives.html;if(r)e.el.innerHTML=ne(r.value,e.scope,e.owner);else for(var i=e.aNode.children,o=0;o<i.length;o++){var s=Ge(i[o],e);e.children.push(s),s.attach(e.el)}e._contentReady=1}}function ct(e,t){this.lifeCycle.attached||(at(this,e,t),this._attached())}function lt(e){var t,n=e.nodeType===he.CMPT?e.givenANode:e.aNode,r=n&&n.directives.transition,i=e.owner;return r&&i&&"function"==typeof(t=Ne(i,r.value.name))&&(t=t.apply(i,re(r.value.args,e.scope,i))),t||e.transition}function pt(e){if(!e.lifeCycle.leaving)if(e.disposeNoTransition)e._doneLeave();else{var t=lt(e);t&&t.leave?(e._toPhase("leaving"),t.leave(e.el,function(){e._doneLeave()})):e._doneLeave()}}function ut(){pt(this)}function dt(e,t){this.leaveDispose=1,this.disposeNoDetach=e,this.disposeNoTransition=t,pt(this)}function ht(e,t,n){"function"==typeof t&&(n=!!n,this._elFns.push([e,t,n]),u(this.el,e,t,n))}function ft(e,t){var n=!0,r=t;if(l(e.expr.name.paths,function(e){return!!e.value&&(r=r[e.value],n=!!r)}),!n){var i=[];l(e.expr.name.paths,function(e){i.push(e.value)});var o="[SAN WARNING] "+e.name+' listen fail,"'+i.join(".")+'" not exist';if("object"!=typeof console||!console.warn)throw new Error(o);console.warn(o)}}function vt(){this.composing&&(this.composing=0,E(this,"input"))}function mt(){this.composing=1}function yt(e,t){_e(this.tagName,e.name).output(this,e,t)}function gt(e,t,n){var r=p(yt,e,t,n);return function(e){this.composing||r(e)}}function wt(){this._toPhase("created");for(var e=this.nodeType===he.CMPT,t=e?this.data:this.scope,n=this.aNode.hotspot.xProps,r=0,i=n.length;r<i;r++){var o=n[r];switch(o.name){case"value":switch(this.tagName){case"input":case"textarea":Se&&window.CompositionEvent&&(this._onEl("change",vt),this._onEl("compositionstart",mt),this._onEl("compositionend",vt)),this._onEl("oninput"in this.el?"input":"propertychange",gt(this,o,t));break;case"select":this._onEl("change",p(yt,this,o,t))}break;case"checked":switch(this.tagName){case"input":switch(this.el.type){case"checkbox":case"radio":this._onEl("click",p(yt,this,o,t))}}}}var a=e?this.aNode.events.concat(this.nativeEvents):this.aNode.events;for(r=0,i=a.length;r<i;r++){var c=a[r],l=e?this:this.owner;c.modifier.native&&(l=l.owner,t=this.scope||l.data),ft(c,l),this._onEl(c.name,p(Te,l,c,0,t),c.modifier.capture)}if(this._toPhase("attached"),this._isInitFromEl)this._isInitFromEl=!1;else{var u=lt(this);u&&u.enter&&u.enter(this.el,s)}}function bt(e){Fe(e,1,1);for(var t,n,r,i,o=e._elFns.length;o--;){var s=e._elFns[o];t=e.el,n=s[0],r=s[1],i=s[2],t.addEventListener?t.removeEventListener(n,r,i):t.detachEvent("on"+n,r)}e._elFns=null,e.disposeNoDetach&&e.parent||v(e.el),e._toPhase&&e._toPhase("detached"),e._spreadData=null,Be(e)}function xt(e){e.tagName=e.tagName||e.aNode.tagName||"div",_&&e.tagName.indexOf("-")>0&&(e.tagName="div")}function _t(e,t){Se&&it&&it.debug&&window.__san_devtool__&&window.__san_devtool__.emit(e,t)}function Et(e){e=e||{},this.lifeCycle=de.start,this.children=[],this._elFns=[],this.listeners={},this.slotChildren=[];var t=this.constructor;this.filters=this.filters||t.filters||{},this.computed=this.computed||t.computed||{},this.messages=this.messages||t.messages||{},this.subTag=e.subTag,Ct(t),function(e){var t=[];function n(e,n){var r=t.length;l(t,function(t,i){n&&i===r-1||l(e,function(e){t.hotspot.data[e]=1})})}!function e(r){if(!r.hotspot){if(t.push(r),r.textExpr)r.hotspot={data:{}},n(Rt(r.textExpr));else{var i;for(var o in Se&&r.tagName&&!/^(template|slot|select|input|option)$/i.test(r.tagName)&&(i=f(r.tagName)),r.hotspot={data:{},dynamicProps:[],xProps:[],props:{},sourceNode:i},l(r.vars,function(e){n(Rt(e.expr))}),l(r.props,function(e){n(Rt(e.expr))}),r.directives){var s=r.directives[o];n(Rt(s.value),!/^(html|bind)$/.test(o))}if(l(r.elses,function(t){e(t)}),l(r.children,function(t){e(t)}),l(r.props,function(e,t){r.hotspot.props[e.name]=t,"id"===e.name?(e.id=!0,r.hotspot.idProp=e,r.hotspot.dynamicProps.push(e)):null!=e.expr.value?i&&_e(r.tagName,e.name).prop(i,e.expr.value,e.name,r):(e.x&&r.hotspot.xProps.push(e),r.hotspot.dynamicProps.push(e))}),"option"===r.tagName&&!fe(r,"value")&&r.children[0]){var a={name:"value",expr:r.children[0].textExpr};r.props.push(a),r.hotspot.dynamicProps.push(a),r.hotspot.props.value=r.props.length-1}}t.pop()}}(e.prototype.aNode)}(t);var n=this,r=t.prototype.aNode;n.givenANode=e.aNode,n.givenNamedSlotBinds=[],n.givenSlots={named:{}},this.owner=e.owner,this.scope=e.scope,this.el=e.el;var i,s,c=e.parent;if(c&&(this.parent=c,this.parentComponent=c.nodeType===he.CMPT?c:c&&c.parentComponent),this.id=o(),this.el){var u=this.el.firstChild;if(3===u.nodeType&&(u=u.nextSibling),u&&8===u.nodeType){var d=u.data.match(/^\s*s-data:([\s\S]+)?$/);if(d){var h=d[1];e.data=new Function("return "+h.replace(/^[\s\n]*/,""))(),u.previousSibling&&v(u.previousSibling),v(u)}}}this.nativeEvents=[],this.givenANode&&(this._createGivenSlots(),l(this.givenANode.events,function(t){t.modifier.native?n.nativeEvents.push(t):(ft(t,e.owner),n.on(t.name,p(Te,e.owner,t,1,e.scope),t))}),this.tagName=r.tagName||n.givenANode.tagName,this.binds=(i=this.givenANode.props,s=[],l(i,function(e){s.push({name:j(e.name),expr:e.expr,x:e.x,raw:e.raw})}),s),this.givenANode.directives.bind&&this.scope&&(this._spreadData=ne(this.givenANode.directives.bind.value,this.scope,this.owner))),this._toPhase("compiled"),this.data=new Ce(a("function"==typeof this.initData&&this.initData()||{},e.data||this._spreadData)),xt(this),l(this.binds,function(e){if(J(e),n.scope){var t=ne(e.expr,n.scope,n.owner);void 0!==t&&n.data.set(e.name,t)}});var m=this.dataTypes||t.dataTypes;if(m){var y=function(e,t){return function(n){for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if("function"!=typeof i)throw new Error("[SAN ERROR] "+t+":"+r+" is invalid; it must be a function, usually from san.DataTypes");i(n,r,t,r)}}}(m,this.subTag||this.name||t.name);this.data.setTypeChecker(y),this.data.checkDataTypes()}for(var g in this.computedDeps={},this.computed)this.computedDeps[g]||this._calcComputed(g);this.dataChanger||(this.dataChanger=p(this._dataChanger,this),this.data.listen(this.dataChanger)),this._toPhase("inited"),this.el&&(nt(this),this._attached());var w=e.reverseWalker;if(w){var b=w.current;b&&1===b.nodeType&&(this.el=b,w.goNext()),nt(this),this._attached()}}function Nt(e){if("function"==typeof e)return e;if("object"!=typeof e)throw new Error("[SAN FATAL] param must be a plain object.");function t(e){Et.call(this,e)}return t.prototype=e,c(t,Et),t}function Ct(e){var t=e.prototype;if(!t.hasOwnProperty("_cmptReady")){t.components=e.components||t.components||{};var n=t.components;for(var r in n){var i=n[r];"object"==typeof i?n[r]=Nt(i):"self"===i&&(n[r]=e)}t._cmptReady=1}if(!t.hasOwnProperty("aNode")){t.aNode=k();var o=e.template||t.template;if(o){var s=ee(o,{trimWhitespace:t.trimWhitespace||e.trimWhitespace,delimiters:t.delimiters||e.delimiters}),a=s.children[0];if(1!==s.children.length||a.textExpr)throw new Error("[SAN FATAL] template must have a root element.");t.aNode=a,"template"===a.tagName&&(a.tagName=null);for(var c={class:{name:"class",expr:W('{{class | _class | _sep(" ")}}')},style:{name:"style",expr:W('{{style | _style | _sep(";")}}')},id:{name:"id",expr:W("{{id}}")}},l=a.props.length;l--;){var p=a.props[l],u=c[p.name];u&&(a.props.splice(l,1),c[p.name]=p,"id"!==p.name&&(p.expr.segs.push(u.expr.segs[0]),p.expr.value=null))}a.props.push(c.class,c.style,c.id)}}}function Rt(e){var t=[];function n(e){l(e,function(e){t=t.concat(Rt(e))})}switch(e.type){case I.ACCESSOR:var r=e.paths;t.push(r[0].value),r.length>1&&t.push(r[0].value+"."+(r[1].value||"*")),n(r.slice(1));break;case I.UNARY:return Rt(e.expr);case I.TEXT:case I.BINARY:case I.TERTIARY:n(e.segs);break;case I.INTERP:t=Rt(e.expr),l(e.filters,function(e){n(e.name.paths),n(e.args)})}return t}_t.start=function(e){it=e,_t("san",e)},Et.prototype.getComponentType=function(e){return this.components[e.tagName]},Et.prototype._createGivenSlots=function(){var e=this;e.givenSlots.named={},e.givenANode&&e.scope&&l(e.givenANode.children,function(t){var n,r=!t.textExpr&&fe(t,"slot");if(r){!e.givenSlotInited&&e.givenNamedSlotBinds.push(r);var i=ne(r.expr,e.scope,e.owner);(n=e.givenSlots.named[i])||(n=e.givenSlots.named[i]=[])}else e.givenSlotInited||(n=e.givenSlots.noname)||(n=e.givenSlots.noname=[]);n&&n.push(t)}),e.givenSlotInited=!0},Et.prototype.nodeType=he.CMPT,Et.prototype.nextTick=w,Et.prototype._callHook=Et.prototype._toPhase=function(e){this.lifeCycle[e]||(this.lifeCycle=de[e]||this.lifeCycle,"function"==typeof this[e]&&this[e](),this["_after"+e]=1,_t("comp-"+e,this))},Et.prototype.on=function(e,t,n){"function"==typeof t&&(this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({fn:t,declaration:n}))},Et.prototype.un=function(e,t){for(var n=this.listeners[e],r=n&&n.length;r--;)t&&t!==n[r].fn||n.splice(r,1)},Et.prototype.fire=function(e,t){var n=this;l(this.listeners[e],function(e){e.fn.call(n,t)})},Et.prototype._calcComputed=function(e){var t=this.computedDeps[e];t||(t=this.computedDeps[e]={}),this.data.set(e,this.computed[e].call({data:{get:p(function(n){if(!n)throw new Error("[SAN ERROR] call get method in computed need argument");return t[n]||(t[n]=1,this.computed[n]&&this._calcComputed(n),this.watch(n,function(){this._calcComputed(e)})),this.data.get(n)},this)}}))},Et.prototype.dispatch=function(e,t){for(var n=this.parentComponent;n;){var r=n.messages[e]||n.messages["*"];if("function"==typeof r){r.call(n,{target:this,value:t,name:e});break}n=n.parentComponent}},Et.prototype.slot=function(e){var t=[],n=this;return function r(i){l(i,function(i){i.nodeType===he.SLOT&&i.owner===n?(i.isNamed&&i.name===e||!i.isNamed&&!e)&&t.push(i):r(i.children)})}(this.children),t},Et.prototype.ref=function(e){var t,n=this;function r(i){l(i,function(i){return function(i){if(i.nodeType===he.TEXT)return;if(i.owner===n){var o;switch(i.nodeType){case he.ELEM:(o=i.aNode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i.el);break;case he.CMPT:(o=i.givenANode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i)}!t&&r(i.slotChildren)}!t&&r(i.children)}(i),!t})}return r(this.children),t},Et.prototype._update=function(e){if(!this.lifeCycle.disposed){var t=this,n=!1;if(this._notifyNeedReload=function(){n=!0},e){var r=this.givenANode.directives.bind;if(r)for(var i=e.length;i--;)if(ce(e[i].expr,r.value,this.scope)){for(var o=ne(r.value,this.scope,this.owner),s=Me(o,this._spreadData),a=0,c=s.length;a<c;a++){var p=s[a];p in this.givenANode.hotspot.props||o[p]===this._spreadData[p]||t.data.set(p,o[p],{target:{id:t.owner.id}})}this._spreadData=o;break}if(l(e,function(e){var r=e.expr;l(t.binds,function(n){var i,o=n.name,s=n.expr;!Ee(e,t,o)&&(i=ce(r,s,t.scope))&&(i>2&&(o=P([{type:I.STRING,value:o}].concat(r.paths.slice(s.paths.length))),s=r),t.data.set(o,ne(s,t.scope,t.owner),{target:{id:t.owner.id}}))}),l(t.givenNamedSlotBinds,function(e){return!(n=n||ce(r,e.expr,t.scope))})}),n)this._createGivenSlots(),this._repaintChildren();else for(var u=this.slotChildren.length;u--;){var d=this.slotChildren[u];d.lifeCycle.disposed?this.slotChildren.splice(u,1):d.isInserted&&d._update(e,1)}}var h=this.dataChanges;h&&(this.dataChanges=null,l(this.aNode.hotspot.dynamicProps,function(e){l(h,function(n){if(ce(n.expr,e.expr,t.data)||e.hintExpr&&ce(n.expr,e.hintExpr,t.data))return rt(t,ne(e.expr,t.data,t),e),!1})}),$e(this,h),n&&(this._createGivenSlots(),this._repaintChildren()),this._toPhase("updated"),this.owner&&(this._updateBindxOwner(h),this.owner._update())),this._notifyNeedReload=null}},Et.prototype._updateBindxOwner=function(e){var t=this;this.owner&&l(e,function(e){l(t.binds,function(n){var r=e.expr;if(n.x&&!Ee(e,t.owner)&&ce(r,$(n.name),t.data)){var i=n.expr;r.paths.length>1&&(i=P(n.expr.paths.concat(r.paths.slice(1)))),t.scope.set(i,ne(r,t.data,t),{target:{id:t.id,prop:n.name}})}})})},Et.prototype._repaintChildren=function(){Fe(this,0,1),this.children=[],this._contentReady=0,this.slotChildren=[],at(this)},Et.prototype._dataChanger=function(e){this.lifeCycle.created&&this._aftercreated?(this.dataChanges||(w(this._update,this),this.dataChanges=[]),this.dataChanges.push(e)):this.lifeCycle.inited&&this.owner&&this._updateBindxOwner([e])},Et.prototype.watch=function(e,t){var n=$(e);this.data.listen(p(function(e){ce(e.expr,n,this.data)&&t.call(this,ne(n,this.data,this),e)},this))},Et.prototype.dispose=dt,Et.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||(this.slotChildren=null,this.data.unlisten(),this.dataChanger=null,this.dataChanges=null,bt(this,this.disposeNoDetach,this.disposeNoTransition),this.listeners=null,this.givenANode=null,this.givenSlots=null,this.givenNamedSlotBinds=null):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Et.prototype._attached=wt,Et.prototype.attach=ct,Et.prototype.detach=ut,Et.prototype._create=st,Et.prototype._onEl=ht;var Tt={version:"3.5.8",debug:!0,Component:Et,defineComponent:Nt,compileComponent:Ct,parseTemplate:ee,parseExpr:$,ExprType:I,LifeCycle:de,NodeType:he,nextTick:w,Data:Ce,evalExpr:ne,inherits:c,DataTypes:S};e.exports=Tt,_t.start(Tt)}()}).call(this,n("./node_modules/timers-browserify/main.js").setImmediate)},"./node_modules/setimmediate/setImmediate.js":function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,s,a,c=1,l={},p=!1,u=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){f(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){f(e.data)},r=function(e){o.port2.postMessage(e)}):u&&"onreadystatechange"in u.createElement("script")?(i=u.documentElement,r=function(e){var t=u.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(f,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&f(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(s+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return l[c]=i,r(c),c++},d.clearImmediate=h}function h(e){delete l[e]}function f(e){if(p)setTimeout(f,0,e);else{var t=l[e];if(t){p=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{h(e),p=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/process/browser.js"))},"./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san":function(e,t,n){var r=n("./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san");"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0},o=n("./node_modules/style-loader/lib/addStyles.js")(r,i);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san",function(t){!function(){var t=n("./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}()}),e.hot.dispose(function(){o()})},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,l=0,p=[],u=n("./node_modules/style-loader/lib/urls.js");function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(g(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],t));o[r.id]={id:r.id,refs:1,parts:a}}}}function h(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function f(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),p.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=p.indexOf(e);t>=0&&p.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),f(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var s=l++;n=c||(c=m(t)),r=x.bind(null,n,s,!1),i=x.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=u(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return d(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}e&&d(h(e,t),t);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete o[a.id]}}}};var w,b=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function x(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},"./node_modules/timers-browserify/main.js":function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n("./node_modules/setimmediate/setImmediate.js"),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./src/components/table.san":function(e,t,n){var r,i,o={};n("./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?sourceMap!./node_modules/san-loader/lib/style-rewriter.js!./node_modules/san-loader/lib/selector.js?type=style&index=0!./src/components/table.san"),(r=n("./node_modules/san-loader/lib/selector.js?type=script&index=0!./src/components/table.san"))&&r.__esModule&&Object.keys(r).length>1&&console.warn("[san-loader] src/components/table.san: named exports in *.san files are ignored."),i=n("./node_modules/html-loader/index.js?minimize=false!./node_modules/san-loader/lib/selector.js?type=template&index=0!./src/components/table.san");var s={};r&&(s=r.__esModule?r.default:r),i&&(s.template=i);var a=n("./node_modules/san/dist/san.dev.js").defineComponent(s);e.exports=a,e.exports.__esModule&&(e.exports=e.exports.default),a.computed||(a.computed={}),Object.keys(o).forEach(function(e){var t=o[e];a.computed[e]=function(){return t}})},"./src/index.js":function(e,t,n){"use strict";n.r(t);n("./node_modules/san/dist/san.dev.js");var r=n("./node_modules/san-router/dist/san-router.source.js"),i=n("./src/components/table.san"),o=n.n(i);r.router.add({rule:"/",Component:o.a,target:"body"}),r.router.start()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,